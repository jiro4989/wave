import unittest

include wave

import os, streams, math

const
  outDir = "tests"/"testdata"

suite "sample":
  test "create wav file":
    var data = @[
      # Riff header
      0x52'u8, 0x49, 0x46, 0x46, # id
      0x74, 0x00, 0x00, 0x00,    # size
      0x57, 0x41, 0x56, 0x45,    # type
      # Format chunk
      0x66, 0x6D, 0x74, 0x20, # id
      0x10, 0x00, 0x00, 0x00, # size
      0x01, 0x00,             # format
      0x01, 0x00,             # channels
      0x40, 0x1F, 0x00, 0x00, # sample rate
      0x40, 0x1F, 0x00, 0x00, # bytepersec
      0x01, 0x00,             # blockalign
      0x08, 0x00,             # bitswidth
      # Data chunk
      0x64, 0x61, 0x74, 0x61, # id
      0x50, 0x00, 0x00, 0x00, # size
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
      0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, # data
    ]

    var strm = newFileStream(outDir/"sample1.wav", fmWrite)
    for b in data:
      strm.write(b)
    strm.close()

test "parseWaveFile":
  echo "simple.wav"
  echo "==========="
  echo openWaveReadFile(outDir/"simple.wav")

suite "usecase":
  test "reading wav file":
    var wav = openWaveReadFile(outDir/"/sample1.wav")
    doAssert wav.riffChunkDescriptorSize == 116
    doAssert wav.numChannels == numChannelsMono
    doAssert wav.sampleRate == 8000'u32
    doAssert wav.byteRate == 8000'u32
    doAssert wav.blockAlign == 1'u16
    doAssert wav.bitsPerSample == 8'u16
    doAssert wav.numFrames == 80
    doAssert wav.dataSubChunkSize == 80'u16
    ## Output:
    ## (riffChunkDescriptor: (id: "RIFF", size: 116, format: "WAVE"), formatSubChunk: (id: "fmt ", size: 16, format: 1, numChannels: 1, sampleRate: 8000, byteRate: 8000, blockAlign: 1, bitsPerSample: 8, extendedSize: 0, extended: @[]), dataSubChunk: (id: "data", size: 80, data: ...), audioStartPos: 44)

    wav.close()

  test "writing square wave":
    var wav = openWaveWriteFile(outDir/"example_square.wav")

    wav.numChannels = numChannelsMono
    wav.sampleRate = 8000'u16

    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])
    wav.writeFrames([0xFF'u8, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00])

    wav.close()

  test "writing sine wave":
    let
      width = 127'f
      sampleRate = 44100'f
      hz = 440'f
      seconds = 3

    var wav = openWaveWriteFile(outDir/"example_sine.wav")

    wav.numChannels = numChannelsMono
    wav.sampleRate = sampleRate.uint16

    for _ in 0 ..< seconds:
      var buf: seq[byte]
      for i in 0 ..< sampleRate.int:
        let f = float(i)
        let b = byte(width * sin(2*PI*hz*f/sampleRate) + width)
        buf.add(b)
      wav.writeFrames(buf)

    wav.close()

